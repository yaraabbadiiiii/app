#!/usr/bin/env python3
from __future__ import annotations

import argparse
from pathlib import Path
import cv2
import numpy as np

from service.qr_checker import classify_frame
from connectivity.quick_connect import connect_via_qr_frame

def _read_rgb_from_file(path: Path) -> np.ndarray:
    bgr = cv2.imread(str(path), cv2.IMREAD_COLOR)
    if bgr is None:
        raise FileNotFoundError(f"Cannot open image: {path}")
    return cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB)

def main() -> int:
    ap = argparse.ArgumentParser(description="Decode WIFI: QR from image; optionally connect via nmcli.")
    ap.add_argument("image", type=Path, help="Path to QR image (PNG/JPG).")
    ap.add_argument("--connect", action="store_true", help="Attempt nmcli connect if WIFI: QR is found.")
    args = ap.parse_args()

    rgb = _read_rgb_from_file(args.image)
    decision = classify_frame(rgb)

    if decision.kind == "ocr":
        print("[RESULT] No QR detected. Route to OCR (placeholder).")
        return 2

    if decision.kind == "other_qr":
        note = decision.error or (decision.payload or "<non-wifi-qr>")
        print(f"[RESULT] QR decoded but not WIFI:. info={note}")
        return 3

    print(f"[DECODE] WIFI payload (masked): {decision.payload}")
    ssid = getattr(decision.creds, "ssid", None)
    hidden = bool(getattr(decision.creds, "hidden", False))
    has_password = bool(getattr(decision.creds, "password", None))
    print(f"[PARSED] SSID='{ssid}', hidden={hidden}, password={'<present>' if has_password else '<none>'}")

    if not args.connect:
        print("[RESULT] Parser OK ✓ (not connecting; --connect to test nmcli)")
        return 0

    ok = connect_via_qr_frame(rgb)
    print("[RESULT]", "Connected & online ✓" if ok else "Connect attempt failed ✗")
    return 0 if ok else 4

if __name__ == "__main__":
    raise SystemExit(main())
